@page "/register"
@using FindTradie.Shared.Contracts.DTOs
@using FindTradie.Shared.Domain.Enums
@inject FindTradie.Web.Services.IAuthService AuthService
@inject NavigationManager Navigation

<PageTitle>Register - FindTradie</PageTitle>

<div class="register-page">
    <div class="register-card">
        <div class="register-header">
            <h2>Join FindTradie</h2>
            <p>Create your account to get started</p>
        </div>

        <form class="register-form">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <div class="user-type-selector">
                <div class="type-card @(SelectedUserType == UserType.Customer ? "active" : string.Empty)" @onclick="() => SelectedUserType = UserType.Customer">
                    <div class="type-icon">🏠</div>
                    <div class="type-label">Customer</div>
                    <div class="type-description">I need services</div>
                </div>
                <div class="type-card @(SelectedUserType == UserType.Tradie ? "active" : string.Empty)" @onclick="() => SelectedUserType = UserType.Tradie">
                    <div class="type-icon">🔧</div>
                    <div class="type-label">Tradie</div>
                    <div class="type-description">I provide services</div>
                </div>
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <input @bind="FirstName" type="text" class="form-control" id="firstName" placeholder="John" />
                </div>
                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <input @bind="LastName" type="text" class="form-control" id="lastName" placeholder="Smith" />
                </div>
            </div>

            <div class="form-group">
                <label for="email">Email Address</label>
                <input @bind="Email" type="email" class="form-control" id="email" placeholder="john@example.com" />
            </div>

            <div class="form-group">
                <label for="phone">Phone Number</label>
                <input @bind="PhoneNumber" type="tel" class="form-control" id="phone" placeholder="0412 345 678" />
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="password">Password</label>
                    <input @bind-value="Password" @bind-value:event="oninput" type="password" class="form-control" id="password" placeholder="Min 8 characters" />
                    <div class="password-strength @PasswordStrength"></div>
                </div>
                <div class="form-group">
                    <label for="confirmPassword">Confirm Password</label>
                    <input @bind="ConfirmPassword" type="password" class="form-control" id="confirmPassword" placeholder="Confirm password" />
                </div>
            </div>

            <button type="button" class="btn-submit" @onclick="RegisterAsync" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Create Account
            </button>

            <div class="form-footer">
                Already have an account? <a href="/login">Sign in here</a>
            </div>
        </form>
    </div>
</div>

@code {
    private UserType SelectedUserType = UserType.Customer;
    private string FirstName = "";
    private string LastName = "";
    private string Email = "";
    private string PhoneNumber = "";
    private string Password = "";
    private string ConfirmPassword = "";
    private string ErrorMessage = "";
    private bool IsLoading = false;
    private string PasswordStrength =>
        string.IsNullOrEmpty(Password)
            ? string.Empty
            : Password.Length < 6
                ? "strength-weak"
                : Password.Length < 10
                    ? "strength-medium"
                    : "strength-strong";

    private async Task RegisterAsync()
    {
        // Validation
        if (string.IsNullOrWhiteSpace(FirstName) || string.IsNullOrWhiteSpace(LastName) ||
            string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Please fill in all required fields.";
            return;
        }

        if (Password != ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        if (Password.Length < 6)
        {
            ErrorMessage = "Password must be at least 6 characters long.";
            return;
        }

        IsLoading = true;
        ErrorMessage = "";
        StateHasChanged();

        try
        {
            var request = new CreateUserRequest(
                Email, Password, FirstName, LastName, PhoneNumber, SelectedUserType);

            var response = await AuthService.RegisterAsync(request);
            
            if (response.Success)
            {
                Navigation.NavigateTo("/login?message=Registration successful. Please log in.");
            }
            else
            {
                ErrorMessage = response.Message ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during registration. Please try again.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}