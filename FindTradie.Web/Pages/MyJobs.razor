@page "/my-jobs"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Customer")]
@using FindTradie.Web.DTOs
@inject IJobApiService JobService
@inject NavigationManager Navigation

<PageTitle>My Jobs - FindTradie</PageTitle>

<div class="my-jobs-page">
    <div class="page-header">
        <div class="container">
            <div class="header-content">
                <h1>My Posted Jobs</h1>
                <button class="btn btn-primary" @onclick="PostNewJob">
                    <i class="bi bi-plus-circle"></i> Post New Job
                </button>
            </div>
        </div>
    </div>

    <!-- Job Status Tabs -->
    <div class="status-tabs">
        <div class="container">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "active" ? "active" : "")" 
                            @onclick='() => SetActiveTab("active")'>
                        Active <span class="badge">@activeJobs.Count</span>
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "in-progress" ? "active" : "")" 
                            @onclick='() => SetActiveTab("in-progress")'>
                        In Progress <span class="badge">@inProgressJobs.Count</span>
                    </button>
                </li>
                <li class="nav-item">
                    <button class="nav-link @(activeTab == "completed" ? "active" : "")" 
                            @onclick='() => SetActiveTab("completed")'>
                        Completed <span class="badge">@completedJobs.Count</span>
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Jobs List -->
    <div class="jobs-container">
        <div class="container">
            @if (isLoading)
            {
                <div class="loading-state">
                    <div class="spinner-border text-primary" role="status"></div>
                    <p>Loading your jobs...</p>
                </div>
            }
            else if (!GetCurrentTabJobs().Any())
            {
                <div class="empty-state">
                    <i class="bi bi-folder-open" style="font-size: 4rem; color: #dee2e6;"></i>
                    <h3>No @activeTab jobs</h3>
                    <p>Jobs you post will appear here</p>
                    @if (activeTab == "active")
                    {
                        <button class="btn btn-primary" @onclick="PostNewJob">Post Your First Job</button>
                    }
                </div>
            }
            else
            {
                <div class="jobs-list">
                    @foreach (var job in GetCurrentTabJobs())
                    {
                        <div class="job-card">
                            <div class="job-header">
                                <div>
                                    <h3>@job.Title</h3>
                                    <span class="job-category badge bg-secondary">@job.Category</span>
                                </div>
                                <div class="job-status">
                                    @if (job.Status == "Active")
                                    {
                                        <span class="status-badge active">Active</span>
                                    }
                                    else if (job.Status == "InProgress")
                                    {
                                        <span class="status-badge in-progress">In Progress</span>
                                    }
                                    else
                                    {
                                        <span class="status-badge completed">Completed</span>
                                    }
                                </div>
                            </div>

                            <div class="job-body">
                                <p class="job-description">@job.Description</p>
                                
                                <div class="job-meta">
                                    <span><i class="bi bi-calendar"></i> Posted @job.PostedDate</span>
                                    <span><i class="bi bi-cash-stack"></i> @job.Budget</span>
                                    <span><i class="bi bi-geo-alt"></i> @job.Location</span>
                                </div>

                                @if (job.Status == "Active")
                                {
                                    <div class="quotes-info">
                                        <div class="alert alert-info">
                                            <i class="bi bi-chat-quote"></i>
                                            <strong>@job.QuotesCount quotes received</strong>
                                            @if (job.UnreadQuotesCount > 0)
                                            {
                                                <span class="badge bg-danger ms-2">@job.UnreadQuotesCount new</span>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="job-actions">
                                @if (job.Status == "Active")
                                {
                                    <button class="btn btn-primary" @onclick="() => ViewQuotes(job.Id)">
                                        View Quotes (@job.QuotesCount)
                                    </button>
                                    <button class="btn btn-outline-primary" @onclick="() => EditJob(job.Id)">
                                        Edit Job
                                    </button>
                                    <button class="btn btn-outline-danger" @onclick="() => CancelJob(job.Id)">
                                        Cancel
                                    </button>
                                }
                                else if (job.Status == "InProgress")
                                {
                                    <button class="btn btn-primary" @onclick="() => ViewJobProgress(job.Id)">
                                        View Progress
                                    </button>
                                    <button class="btn btn-outline-primary" @onclick="() => ContactTradie(job.TradieId)">
                                        Contact Tradie
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="() => ViewJobDetails(job.Id)">
                                        View Details
                                    </button>
                                    @if (!job.HasReview)
                                    {
                                        <button class="btn btn-warning" @onclick="() => LeaveReview(job.Id)">
                                            Leave Review
                                        </button>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CustomerJobDto> activeJobs = new();
    private List<CustomerJobDto> inProgressJobs = new();
    private List<CustomerJobDto> completedJobs = new();
    private string activeTab = "active";
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadMyJobs();
    }

    private async Task LoadMyJobs()
    {
        isLoading = true;
        try
        {
            var allJobs = await JobService.GetMyJobs();
            activeJobs = allJobs.Where(j => j.Status == "Active").ToList();
            inProgressJobs = allJobs.Where(j => j.Status == "InProgress").ToList();
            completedJobs = allJobs.Where(j => j.Status == "Completed").ToList();
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<CustomerJobDto> GetCurrentTabJobs()
    {
        return activeTab switch
        {
            "active" => activeJobs,
            "in-progress" => inProgressJobs,
            "completed" => completedJobs,
            _ => activeJobs
        };
    }

    private void SetActiveTab(string tab) => activeTab = tab;

    private void PostNewJob() => Navigation.NavigateTo("/post-job");

    private void ViewQuotes(int jobId) => Navigation.NavigateTo($"/job/{jobId}/quotes");

    private void EditJob(int jobId) => Navigation.NavigateTo($"/edit-job/{jobId}");

    private async Task CancelJob(int jobId)
    {
        // Show confirmation dialog and cancel job
        await Task.CompletedTask;
    }

    private void ViewJobProgress(int jobId) => Navigation.NavigateTo($"/job/{jobId}/progress");

    private void ContactTradie(int tradieId) => Navigation.NavigateTo($"/messages?tradieId={tradieId}");

    private void ViewJobDetails(int jobId) => Navigation.NavigateTo($"/job/{jobId}");

    private void LeaveReview(int jobId) => Navigation.NavigateTo($"/job/{jobId}/review");
}

