@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using FindTradie.Web.Auth
@using FindTradie.Shared.Contracts.DTOs
@inject FindTradie.Web.Services.IAuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<PageTitle>Login - FindTradie</PageTitle>

<div class="login-page">
    <div class="login-card">
        <div class="auth-header">
            <h2>Welcome Back</h2>
            <p>Sign in to your FindTradie account</p>
        </div>

        <div class="login-form">
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="alert alert-danger">@ErrorMessage</div>
            }

            <div class="form-group mb-3">
                <label for="email">Email Address</label>
                <input @bind="Email" type="email" id="email" placeholder="Enter your email" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password</label>
                <input @bind="Password" type="password" id="password" placeholder="Enter your password" />
            </div>

            <button @onclick="LoginAsync" disabled="@IsLoading">
                @if (IsLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                Sign In
            </button>

            <div class="auth-links text-center">
                <p>Don't have an account? <a href="/register">Sign up here</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private string Email = "";
    private string Password = "";
    private string ErrorMessage = "";
    private bool IsLoading = false;

    private async Task LoginAsync()
    {
        if (string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Please enter both email and password.";
            return;
        }

        IsLoading = true;
        ErrorMessage = "";
        StateHasChanged();

        try
        {
            var response = await AuthService.LoginAsync(Email, Password);
            
            if (response.Success)
            {
                if (AuthStateProvider is CustomAuthStateProvider customProvider)
                {
                    customProvider.NotifyUserAuthentication(Email);
                }
                
                Navigation.NavigateTo("/dashboard");
            }
            else
            {
                ErrorMessage = response.Message ?? "Login failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = "An error occurred during login. Please try again.";
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
        }
    }
}