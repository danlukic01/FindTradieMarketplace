@page "/my-work"
@attribute [Authorize(Policy = "TradieOnly")]
@using FindTradie.Services.JobManagement.DTOs
@using FindTradie.Services.TradieManagement.Entities
@using FindTradie.Shared.Domain.Enums
@using System.Security.Claims

@inject IJobApiService JobService
@inject IQuoteApiService QuoteService
@inject ITradieApiService TradieService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<link rel="stylesheet" href="css/browse-jobs.css" />

<div class="browse-jobs-page">
    <div class="browse-jobs-header">
        <div class="container">
            <h1>My Work</h1>
            <p>Manage jobs you're working on</p>
        </div>
    </div>

    <div class="container">
        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (!quotedJobs.Any() && !assignedJobs.Any() && !inProgressJobs.Any() && !completedJobs.Any())
        {
            <div class="empty-state">
                <div class="empty-state-icon">üõ†Ô∏è</div>
                <h3>No work yet</h3>
                <p>You don't have any jobs in progress.</p>
                <button class="btn btn-primary" @onclick='() => Navigation.NavigateTo("/find-work")'>Find Work</button>
            </div>
        }
        else
        {
            <div class="job-tabs">
                <button class="tab-btn @(activeTab == "quoted" ? "active" : "")"
                        @onclick='() => SetActiveTab("quoted")'>
                    Quoted (@quotedJobs.Count)
                </button>

                <button class="tab-btn @(activeTab == "assigned" ? "active" : "")"
                        @onclick='() => SetActiveTab("assigned")'>
                    Assigned (@assignedJobs.Count)
                </button>

                <button class="tab-btn @(activeTab == "inprogress" ? "active" : "")"
                        @onclick='() => SetActiveTab("inprogress")'>
                    In Progress (@inProgressJobs.Count)
                </button>

                <button class="tab-btn @(activeTab == "completed" ? "active" : "")"
                        @onclick='() => SetActiveTab("completed")'>
                    Completed (@completedJobs.Count)
                </button>
            </div>


            @if (activeTab == "quoted")
            {
                <div class="jobs-list">
                    @foreach (var job in quotedJobs)
                    {
                        <div class="job-card">
                            <div class="job-card-content">
                                <h3 class="job-title">@job.Title</h3>
                                <p class="job-description">@TruncateText(job.Description, 120)</p>
                                <div class="job-meta">
                                    <span>@job.Suburb, @job.State</span>
                                    <span>@FormatBudgetRange(job.BudgetMin, job.BudgetMax)</span>
                                </div>
                            </div>
                            <div class="job-card-footer">
                                <button class="btn btn-outline" @onclick="() => ViewJobDetails(job.Id)">Details</button>
                                <button class="btn btn-outline-danger" @onclick="() => WithdrawQuote(job.Id)">Withdraw</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "assigned")
            {
                <div class="jobs-list">
                    @foreach (var job in assignedJobs)
                    {
                        <div class="job-card">
                            <div class="job-card-content">
                                <h3 class="job-title">@job.Title</h3>
                                <p class="job-description">@TruncateText(job.Description, 120)</p>
                            </div>
                            <div class="job-card-footer">
                                <button class="btn btn-outline" @onclick="() => StartJob(job.Id)">Start Job</button>
                                <button class="btn btn-outline" @onclick="() => ViewJobDetails(job.Id)">Details</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "inprogress")
            {
                <div class="jobs-list">
                    @foreach (var job in inProgressJobs)
                    {
                        <div class="job-card">
                            <div class="job-card-content">
                                <h3 class="job-title">@job.Title</h3>
                                <p class="job-description">@TruncateText(job.Description, 120)</p>
                            </div>
                            <div class="job-card-footer">
                                <button class="btn btn-outline" @onclick="() => CompleteJob(job.Id)">Mark Complete</button>
                                <button class="btn btn-outline" @onclick="() => ViewJobDetails(job.Id)">Details</button>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "completed")
            {
                <div class="jobs-list">
                    @foreach (var job in completedJobs)
                    {
                        <div class="job-card">
                            <div class="job-card-content">
                                <h3 class="job-title">@job.Title</h3>
                                <p class="job-description">@TruncateText(job.Description, 120)</p>
                            </div>
                            <div class="job-card-footer">
                                <span class="job-status-badge completed">Completed</span>
                                <button class="btn btn-outline" @onclick="() => ViewJobDetails(job.Id)">Details</button>
                            </div>
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private const int RadiusKm = 50;
    private string? errorMessage;
    private string activeTab = "quoted";

    // User info
    private Guid currentTradieId = Guid.Empty;

    // Job lists
    private List<JobSummaryDto> allJobs = new();
    private List<JobSummaryDto> quotedJobs = new();
    private List<JobSummaryDto> assignedJobs = new();
    private List<JobSummaryDto> inProgressJobs = new();
    private List<JobSummaryDto> completedJobs = new();

    // Stats
    private decimal monthlyEarnings = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetTradieInfo();
        await LoadWork();
    }

    private async Task GetTradieInfo()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();

        if (authState.User.Identity?.IsAuthenticated == true)
        {
            // Get user ID from claims
            var userIdClaim = authState.User.FindFirst(ClaimTypes.NameIdentifier) ??
                              authState.User.FindFirst("UserId") ??
                              authState.User.FindFirst("Id");

            if (userIdClaim != null && Guid.TryParse(userIdClaim.Value, out var userId))
            {
                // Get tradie profile
                try
                {
                    var tradieProfileResponse = await TradieService.GetProfileByUserIdAsync(userId);
                    if (tradieProfileResponse?.Success == true && tradieProfileResponse.Data != null)
                    {
                        currentTradieId = tradieProfileResponse.Data.Id;
                    }
                    else
                    {
                        currentTradieId = userId; // Fallback
                    }
                }
                catch
                {
                    currentTradieId = userId; // Fallback
                }
            }
            else
            {
                errorMessage = "Unable to determine user identity. Please log in again.";
                Navigation.NavigateTo("/login");
            }
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadWork()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            if (currentTradieId == Guid.Empty)
            {
                errorMessage = "Unable to identify tradie profile. Please ensure your profile is set up.";
                return;
            }

            // Load all quotes for this tradie
            var quotesResponse = await QuoteService.GetTradieQuotesAsync(currentTradieId);

            // Use SearchJobsAsync to get all available jobs in the area
            var searchRequest = new JobSearchRequest(
                Latitude: null,
                Longitude: null,
                RadiusKm: RadiusKm,
                Categories: null,
                Urgency: null,
                MinBudget: null,
                MaxBudget: null,
                StartDateFrom: null,
                StartDateTo: null,
                HasBudget: null,
                PageNumber: 1,
                PageSize: 100
            );

            var jobsResponse = await JobService.SearchJobsAsync(searchRequest);

            if (jobsResponse.Success && jobsResponse.Data != null)
            {
                allJobs = jobsResponse.Data;

                // If we have quotes data, we can track which jobs we've quoted on
                if (quotesResponse?.Success == true && quotesResponse.Data != null)
                {
                    var myQuotes = quotesResponse.Data;
                    // Store quote information for later use
                }

                CategorizeJobs();
                await CalculateStats();
            }
            else
            {
                errorMessage = jobsResponse.Message ?? "Failed to load jobs. Please try again.";
                allJobs = new List<JobSummaryDto>();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading work: {ex.Message}";
            Console.WriteLine($"Error loading work: {ex}");
            allJobs = new List<JobSummaryDto>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CategorizeJobs()
    {
        // Categorize based on actual job status from the database
        // These statuses come from the JobStatus enum in your domain

        // Jobs where quotes have been sent but not yet accepted
        quotedJobs = allJobs.Where(j =>
            j.Status == JobStatus.QuoteRequested ||
            j.Status == JobStatus.QuoteReceived).ToList();

        // Jobs where this tradie has been assigned (quote accepted)
        assignedJobs = allJobs.Where(j =>
            j.Status == JobStatus.Booked).ToList();

        // Jobs currently being worked on
        inProgressJobs = allJobs.Where(j =>
            j.Status == JobStatus.InProgress).ToList();

        // Completed jobs
        completedJobs = allJobs.Where(j =>
            j.Status == JobStatus.Completed).ToList();
    }

    private async Task CalculateStats()
    {
        // Calculate monthly earnings from completed jobs
        // In a real implementation, you'd get this from a specific API endpoint
        // that tracks actual payments/earnings for the tradie

        var thisMonthCompleted = completedJobs
            .Where(j => j.CreatedAt >= DateTime.Now.AddDays(-30))
            .ToList();

        // For now, estimate earnings based on budget ranges
        // In production, you'd have actual payment data
        monthlyEarnings = 0;
        foreach (var job in thisMonthCompleted)
        {
            if (job.BudgetMax.HasValue && job.BudgetMin.HasValue)
            {
                // Estimate using average of min and max
                monthlyEarnings += (job.BudgetMax.Value + job.BudgetMin.Value) / 2;
            }
            else if (job.BudgetMax.HasValue)
            {
                monthlyEarnings += job.BudgetMax.Value * 0.8m; // Conservative estimate
            }
            else if (job.BudgetMin.HasValue)
            {
                monthlyEarnings += job.BudgetMin.Value;
            }
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private void ViewJobDetails(Guid jobId)
    {
        Navigation.NavigateTo($"/job-details/{jobId}");
    }

    private async Task WithdrawQuote(Guid jobId)
    {
        try
        {
            // Since QuoteSummaryDto doesn't have JobId, we need to get the quote details
            // For now, we'll need to get all quotes for the job and find ours
            var quotesResponse = await QuoteService.GetQuotesByJobAsync(jobId);
            if (quotesResponse?.Success == true && quotesResponse.Data != null)
            {
                // Find our quote by matching the tradie ID
                var myQuote = quotesResponse.Data.FirstOrDefault(q => q.TradieId == currentTradieId);
                if (myQuote != null)
                {
                    // Call the withdraw quote API
                    var withdrawResponse = await QuoteService.WithdrawQuoteAsync(myQuote.Id, "Withdrawn by tradie");

                    if (withdrawResponse.Success)
                    {
                        // Reload the jobs
                        await LoadWork();
                    }
                    else
                    {
                        errorMessage = "Failed to withdraw quote. Please try again.";
                    }
                }
                else
                {
                    errorMessage = "Quote not found for this job.";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error withdrawing quote: {ex.Message}");
            errorMessage = "An error occurred while withdrawing the quote.";
        }
    }

    private async Task StartJob(Guid jobId)
    {
        try
        {
            // Update job status to InProgress
            var response = await JobService.UpdateJobStatusAsync(jobId, JobStatus.InProgress, "Job started by tradie");

            if (response.Success)
            {
                // Reload the jobs
                await LoadWork();
            }
            else
            {
                errorMessage = "Failed to start job. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting job: {ex.Message}");
            errorMessage = "An error occurred while starting the job.";
        }
    }

    private async Task CompleteJob(Guid jobId)
    {
        try
        {
            // Mark job as completed
            var response = await JobService.CompleteJobAsync(jobId, "Job completed successfully");

            if (response.Success)
            {
                // Reload the jobs
                await LoadWork();
            }
            else
            {
                errorMessage = "Failed to complete job. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error completing job: {ex.Message}");
            errorMessage = "An error occurred while completing the job.";
        }
    }

    // Helper methods
    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text))
            return "";

        if (text.Length <= maxLength)
            return text;

        return text.Substring(0, maxLength) + "...";
    }

    private string GetTimeAgo(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1)
            return "just now";
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minute{((int)timeSpan.TotalMinutes == 1 ? "" : "s") } ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hour{((int)timeSpan.TotalHours == 1 ? "" : "s") } ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} day{((int)timeSpan.TotalDays == 1 ? "" : "s") } ago";

        return dateTime.ToShortDateString();
    }

    private string GetCategoryDisplayName(ServiceCategory category)
    {
        return category switch
        {
            ServiceCategory.Plumbing => "Plumbing",
            ServiceCategory.Electrical => "Electrical",
            ServiceCategory.Carpentry => "Carpentry",
            ServiceCategory.Painting => "Painting",
            ServiceCategory.Roofing => "Roofing",
            ServiceCategory.HVAC => "HVAC",
            ServiceCategory.Landscaping => "Landscaping",
            ServiceCategory.Cleaning => "Cleaning",
            ServiceCategory.Handyman => "Handyman",
            ServiceCategory.Emergency => "Emergency",
            ServiceCategory.Other => "Other",
            _ => category.ToString()
        };
    }

    private string FormatBudgetRange(decimal? min, decimal? max)
    {
        if (min.HasValue && max.HasValue)
            return $"${min:N0} - ${max:N0}";
        if (min.HasValue)
            return $"From ${min:N0}";
        if (max.HasValue)
            return $"Up to ${max:N0}";
        return "Negotiable";
    }
}
