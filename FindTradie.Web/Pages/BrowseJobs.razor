@page "/browse-jobs"
@using FindTradie.Web.Services
@inject IJobApiService JobService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Browse Jobs - FindTradie</PageTitle>

<link rel="stylesheet" href="css/browse-jobs.css" />

<div class="browse-jobs-page">
    <!-- Header Section -->
    <div class="browse-jobs-header">
        <div class="container">
            <h1>Available Jobs in Your Area</h1>
            <p>Find and quote on jobs that match your skills</p>
        </div>
    </div>

    <!-- Main Content Container -->
    <div class="container">
        <!-- Filters Section -->
        <div class="filters-section">
            <div class="filter-row">
                <input type="text"
                       class="filter-input"
                       placeholder="Search jobs by keyword..."
                       @bind="searchTerm"
                       @oninput="@((e) => OnSearchChanged(e.Value?.ToString()))" />

                <select class="filter-select" @bind="selectedCategory">
                    <option value="">All Categories</option>
                    <option value="plumbing">Plumbing</option>
                    <option value="electrical">Electrical</option>
                    <option value="carpentry">Carpentry</option>
                    <option value="painting">Painting</option>
                    <option value="landscaping">Landscaping</option>
                    <option value="cleaning">Cleaning</option>
                </select>

                <select class="filter-select" @bind="selectedDistance">
                    <option value="">Within 20km</option>
                    <option value="5">Within 5km</option>
                    <option value="10">Within 10km</option>
                    <option value="30">Within 30km</option>
                    <option value="50">Within 50km</option>
                </select>

                <select class="filter-select" @bind="selectedBudget">
                    <option value="">Any Budget</option>
                    <option value="0-500">Under $500</option>
                    <option value="500-1000">$500 - $1000</option>
                    <option value="1000-5000">$1000 - $5000</option>
                    <option value="5000+">Over $5000</option>
                </select>

                <select class="filter-select" @bind="selectedTimeframe">
                    <option value="">Any Timeframe</option>
                    <option value="urgent">ASAP / Urgent</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                    <option value="flexible">Flexible</option>
                </select>
            </div>
        </div>

        <!-- Jobs Header with Count and View Toggle -->
        <div class="jobs-header">
            <div class="jobs-count">
                @filteredJobs.Count jobs matching your criteria
            </div>
            <div class="view-toggle">
                <button class="view-toggle-btn @(viewMode == "grid" ? "active" : "")"
                        @onclick='() => viewMode = "grid"'>
                    Grid
                </button>
                <button class="view-toggle-btn @(viewMode == "list" ? "active" : "")"
                        @onclick='() => viewMode = "list"'>
                    List
                </button>
            </div>
        </div>

        <!-- Jobs Display -->
        @if (isLoading)
        {
            <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading jobs...</span>
                </div>
            </div>
        }
        else if (!filteredJobs.Any())
        {
            <div class="empty-state">
                <div class="empty-state-icon">🔍</div>
                <h3>No jobs found</h3>
                <p>Try adjusting your filters or check back later for new opportunities.</p>
                <button class="btn btn-primary" @onclick="ResetFilters">Reset Filters</button>
            </div>
        }
        else
        {
            <div class="@(viewMode == "grid" ? "jobs-grid" : "jobs-list")">
                @foreach (var job in filteredJobs)
                {
                    <div class="job-card">
                        @* Option 1: Badge positioned on top edge *@
                        @if (job.IsUrgent)
                        {
                            <span class="urgent-badge">URGENT</span>
                        }

                        <div class="job-card-content">
                            <div class="job-card-header">
                                <div>
                                    <h3 class="job-title">
                                        @job.Title
                                        @* Option 2: Inline badge next to title *@
                                        @* @if (job.IsUrgent)
                                        {
                                            <span class="urgent-badge-inline">URGENT</span>
                                        } *@
                                    </h3>
                                    <span class="job-category">@job.Category</span>
                                </div>
                            </div>

                            <p class="job-description">@job.Description</p>

                            <div class="job-info">
                                <span class="job-info-item">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                                    </svg>
                                    @job.Location (@job.Distance km away)
                                </span>
                                <span class="job-info-item">
                                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                    </svg>
                                    Posted @job.PostedTime
                                </span>
                            </div>

                            @if (job.PhotoCount > 0)
                            {
                                <div class="job-photos">
                                    <svg class="photo-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    @job.PhotoCount photos attached
                                </div>
                            }

                            <div class="job-stats">
                                <div class="job-stat">
                                    <span class="job-stat-value">@job.QuoteCount</span>
                                    <span>quotes</span>
                                </div>
                                <div class="job-stat">
                                    <span class="job-stat-value">@job.ViewCount</span>
                                    <span>views</span>
                                </div>
                            </div>

                            <div class="job-card-footer">
                                <div class="job-budget">
                                    <span class="budget-label">Budget</span>
                                    <span class="budget-amount">$@job.BudgetMin - $@job.BudgetMax</span>
                                </div>
                                <div class="job-timing">
                                    <strong>@job.Timeframe</strong>
                                </div>
                            </div>

                            <div class="job-actions">
                                <a href="/jobs/@job.Id" class="btn-view-details">
                                    View Details
                                </a>
                                <button class="btn-send-quote" @onclick="() => SendQuote(job.Id)">
                                    Send Quote
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private List<JobDto> allJobs = new();
    private List<JobDto> filteredJobs = new();
    private bool isLoading = true;
    private string viewMode = "grid";

    // Filter properties
    private string searchTerm = "";
    private string selectedCategory = "";
    private string selectedDistance = "20";
    private string selectedBudget = "";
    private string selectedTimeframe = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadJobs();
    }

    private async Task LoadJobs()
    {
        isLoading = true;
        try
        {
            // Mock data for demonstration
            allJobs = new List<JobDto>
            {
                new JobDto
                {
                    Id = Guid.NewGuid(),
                    Title = "Fix Leaking Bathroom Tap",
                    Category = "Plumbing",
                    Description = "Bathroom tap has been leaking for a week. Need urgent repair.",
                    Location = "Surry Hills, Sydney",
                    Distance = 5.2,
                    BudgetMin = 200,
                    BudgetMax = 400,
                    PostedTime = "2 hours ago",
                    Timeframe = "ASAP",
                    IsUrgent = true,
                    PhotoCount = 3,
                    QuoteCount = 3,
                    ViewCount = 15
                },
                new JobDto
                {
                    Id = Guid.NewGuid(),
                    Title = "Install Ceiling Fans in 3 Bedrooms",
                    Category = "Electrical",
                    Description = "Need 3 ceiling fans installed in bedrooms. Wiring already in place.",
                    Location = "Bondi, Sydney",
                    Distance = 8.7,
                    BudgetMin = 600,
                    BudgetMax = 900,
                    PostedTime = "5 hours ago",
                    Timeframe = "This week",
                    IsUrgent = false,
                    PhotoCount = 0,
                    QuoteCount = 5,
                    ViewCount = 22
                }
            };

            ApplyFilters();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredJobs = allJobs;

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredJobs = filteredJobs.Where(j =>
                j.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                j.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        // Apply category filter
        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filteredJobs = filteredJobs.Where(j =>
                j.Category.Equals(selectedCategory, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }

        // Apply timeframe filter
        if (selectedTimeframe == "urgent")
        {
            filteredJobs = filteredJobs.Where(j => j.IsUrgent).ToList();
        }

        StateHasChanged();
    }

    private void OnSearchChanged(string value)
    {
        searchTerm = value ?? "";
        ApplyFilters();
    }

    private void ResetFilters()
    {
        searchTerm = "";
        selectedCategory = "";
        selectedDistance = "20";
        selectedBudget = "";
        selectedTimeframe = "";
        ApplyFilters();
    }

    private void SendQuote(Guid jobId)
    {
        Navigation.NavigateTo($"/send-quote/{jobId}");
    }

    // Job DTO class
    private class JobDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = "";
        public string Category { get; set; } = "";
        public string Description { get; set; } = "";
        public string Location { get; set; } = "";
        public double Distance { get; set; }
        public decimal BudgetMin { get; set; }
        public decimal BudgetMax { get; set; }
        public string PostedTime { get; set; } = "";
        public string Timeframe { get; set; } = "";
        public bool IsUrgent { get; set; }
        public int PhotoCount { get; set; }
        public int QuoteCount { get; set; }
        public int ViewCount { get; set; }
    }
}